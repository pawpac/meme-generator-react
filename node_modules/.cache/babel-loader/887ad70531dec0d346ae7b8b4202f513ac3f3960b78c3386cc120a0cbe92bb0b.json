{"ast":null,"code":"var _jsxFileName = \"/home/pacman/Documents/DEV/react/meme-generator-react/src/components/InputSection.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport data from '../data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InputSection() {\n  _s();\n  // let [memeNum, setMemeNum] = React.useState('');\n\n  React.useEffect(() => {\n    fetch('https://api.imgflip.com/get_memes').then(res => res.json()).then(data => console.log(data.data));\n  });\n  const [meme, setMeme] = React.useState({\n    topLine: '',\n    bottomLine: '',\n    randomImage: 'http://i.imgflip.com/1bij.jpg'\n  });\n  const [allMemeImages, setAllMemeImages] = React.useState(data);\n  function handleClick() {\n    let randomNum = Math.floor(Math.random() * data.length);\n    const url = data[randomNum].url;\n    setMeme(prevState => ({\n      ...prevState,\n      randomImage: url\n    }));\n  }\n  ;\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setMeme(prevState => {\n      return {\n        ...prevState,\n        [name]: value\n      };\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"topLine\",\n        value: meme.topLine,\n        onChange: handleChange,\n        placeholder: \"Top line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"bottomLine\",\n        value: meme.bottomLine,\n        onChange: handleChange,\n        placeholder: \"Bottom line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick,\n        children: \"Generate new image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"img-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: meme.randomImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"top-text\",\n          children: meme.topLine\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"bottom-text\",\n          children: meme.bottomLine\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(InputSection, \"bQd8ErWtmQoBv2l+gSQJu5ALGQo=\");\n_c = InputSection;\n;\nexport default InputSection;\nvar _c;\n$RefreshReg$(_c, \"InputSection\");","map":{"version":3,"names":["React","data","InputSection","useEffect","fetch","then","res","json","console","log","meme","setMeme","useState","topLine","bottomLine","randomImage","allMemeImages","setAllMemeImages","handleClick","randomNum","Math","floor","random","length","url","prevState","handleChange","event","name","value","target"],"sources":["/home/pacman/Documents/DEV/react/meme-generator-react/src/components/InputSection.js"],"sourcesContent":["import React from 'react';\nimport data from '../data';\n\nfunction InputSection() {\n\n  // let [memeNum, setMemeNum] = React.useState('');\n\n  React.useEffect(() => {\n    fetch('https://api.imgflip.com/get_memes')\n      .then(res => res.json())\n      .then(data => console.log(data.data))\n  })\n\n  const [meme, setMeme] = React.useState({\n    topLine: '',\n    bottomLine: '',\n    randomImage: 'http://i.imgflip.com/1bij.jpg'\n  });\n\n  const [allMemeImages, setAllMemeImages] = React.useState(data);\n\n  function handleClick() {\n    let randomNum = Math.floor(Math.random() * data.length);\n    const url = data[randomNum].url;\n    setMeme(prevState => ({\n      ...prevState,\n      randomImage: url\n    }))\n  };\n\n  function handleChange(event) {\n    const {name, value} = event.target\n    setMeme(prevState => {\n      return {\n        ...prevState,\n        [name]: value\n      }\n    })\n  }\n\n  return (\n    <main>\n      <div className='form'>\n        <input \n          type='text' \n          name='topLine' \n          value={meme.topLine} \n          onChange={handleChange} \n          placeholder='Top line' \n        />\n        <input \n          type='text' \n          name='bottomLine' \n          value={meme.bottomLine} \n          onChange={handleChange} \n          placeholder='Bottom line' \n        />\n        <button onClick={handleClick}>Generate new image</button>\n      </div>\n      <div className='meme'>\n          <div className='img-container'>\n            <img src={meme.randomImage}></img>\n          </div>\n          <div className='text'>\n            <h2 className='top-text'>{meme.topLine}</h2>\n            <h2 className='bottom-text'>{meme.bottomLine}</h2>\n          </div>\n      </div>\n    </main>\n  );\n};\n\nexport default InputSection;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,SAAS;AAAC;AAE3B,SAASC,YAAY,GAAG;EAAA;EAEtB;;EAEAF,KAAK,CAACG,SAAS,CAAC,MAAM;IACpBC,KAAK,CAAC,mCAAmC,CAAC,CACvCC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBF,IAAI,CAACJ,IAAI,IAAIO,OAAO,CAACC,GAAG,CAACR,IAAI,CAACA,IAAI,CAAC,CAAC;EACzC,CAAC,CAAC;EAEF,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGX,KAAK,CAACY,QAAQ,CAAC;IACrCC,OAAO,EAAE,EAAE;IACXC,UAAU,EAAE,EAAE;IACdC,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,KAAK,CAACY,QAAQ,CAACX,IAAI,CAAC;EAE9D,SAASiB,WAAW,GAAG;IACrB,IAAIC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGrB,IAAI,CAACsB,MAAM,CAAC;IACvD,MAAMC,GAAG,GAAGvB,IAAI,CAACkB,SAAS,CAAC,CAACK,GAAG;IAC/Bb,OAAO,CAACc,SAAS,KAAK;MACpB,GAAGA,SAAS;MACZV,WAAW,EAAES;IACf,CAAC,CAAC,CAAC;EACL;EAAC;EAED,SAASE,YAAY,CAACC,KAAK,EAAE;IAC3B,MAAM;MAACC,IAAI;MAAEC;IAAK,CAAC,GAAGF,KAAK,CAACG,MAAM;IAClCnB,OAAO,CAACc,SAAS,IAAI;MACnB,OAAO;QACL,GAAGA,SAAS;QACZ,CAACG,IAAI,GAAGC;MACV,CAAC;IACH,CAAC,CAAC;EACJ;EAEA,oBACE;IAAA,wBACE;MAAK,SAAS,EAAC,MAAM;MAAA,wBACnB;QACE,IAAI,EAAC,MAAM;QACX,IAAI,EAAC,SAAS;QACd,KAAK,EAAEnB,IAAI,CAACG,OAAQ;QACpB,QAAQ,EAAEa,YAAa;QACvB,WAAW,EAAC;MAAU;QAAA;QAAA;QAAA;MAAA,QACtB,eACF;QACE,IAAI,EAAC,MAAM;QACX,IAAI,EAAC,YAAY;QACjB,KAAK,EAAEhB,IAAI,CAACI,UAAW;QACvB,QAAQ,EAAEY,YAAa;QACvB,WAAW,EAAC;MAAa;QAAA;QAAA;QAAA;MAAA,QACzB,eACF;QAAQ,OAAO,EAAER,WAAY;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAA4B;IAAA;MAAA;MAAA;MAAA;IAAA,QACrD,eACN;MAAK,SAAS,EAAC,MAAM;MAAA,wBACjB;QAAK,SAAS,EAAC,eAAe;QAAA,uBAC5B;UAAK,GAAG,EAAER,IAAI,CAACK;QAAY;UAAA;UAAA;UAAA;QAAA;MAAO;QAAA;QAAA;QAAA;MAAA,QAC9B,eACN;QAAK,SAAS,EAAC,MAAM;QAAA,wBACnB;UAAI,SAAS,EAAC,UAAU;UAAA,UAAEL,IAAI,CAACG;QAAO;UAAA;UAAA;UAAA;QAAA,QAAM,eAC5C;UAAI,SAAS,EAAC,aAAa;UAAA,UAAEH,IAAI,CAACI;QAAU;UAAA;UAAA;UAAA;QAAA,QAAM;MAAA;QAAA;QAAA;QAAA;MAAA,QAC9C;IAAA;MAAA;MAAA;MAAA;IAAA,QACJ;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEX;AAAC,GAnEQZ,YAAY;AAAA,KAAZA,YAAY;AAmEpB;AAED,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}